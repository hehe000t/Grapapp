
================================================================================
                        ðŸ”¥ REDCHAT - COMPLETE APPLICATION CODE
================================================================================

## Complete File Structure
redchat-app/
â”œâ”€â”€ client/
â”‚   â”œâ”€â”€ public/
â”‚   â”‚   â””â”€â”€ index.html
â”‚   â”œâ”€â”€ src/
â”‚   â”‚   â”œâ”€â”€ components/
â”‚   â”‚   â”‚   â”œâ”€â”€ Auth/
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ Login.tsx
â”‚   â”‚   â”‚   â”‚   â””â”€â”€ Register.tsx
â”‚   â”‚   â”‚   â”œâ”€â”€ Chat/
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ ChatList.tsx
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ ChatWindow.tsx
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ MessageInput.tsx
â”‚   â”‚   â”‚   â”‚   â””â”€â”€ Message.tsx
â”‚   â”‚   â”‚   â”œâ”€â”€ Status/
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ StatusView.tsx
â”‚   â”‚   â”‚   â”‚   â””â”€â”€ StatusUpload.tsx
â”‚   â”‚   â”‚   â”œâ”€â”€ Group/
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ GroupCreate.tsx
â”‚   â”‚   â”‚   â”‚   â””â”€â”€ GroupSettings.tsx
â”‚   â”‚   â”‚   â”œâ”€â”€ Call/
â”‚   â”‚   â”‚   â”‚   â””â”€â”€ CallInterface.tsx
â”‚   â”‚   â”‚   â””â”€â”€ Profile/
â”‚   â”‚   â”‚       â””â”€â”€ UserProfile.tsx
â”‚   â”‚   â”œâ”€â”€ contexts/
â”‚   â”‚   â”‚   â”œâ”€â”€ AuthContext.tsx
â”‚   â”‚   â”‚   â””â”€â”€ SocketContext.tsx
â”‚   â”‚   â”œâ”€â”€ styles/
â”‚   â”‚   â”‚   â””â”€â”€ theme.ts
â”‚   â”‚   â”œâ”€â”€ App.tsx
â”‚   â”‚   â””â”€â”€ index.tsx
â”‚   â”œâ”€â”€ package.json
â”‚   â”œâ”€â”€ tsconfig.json
â”‚   â””â”€â”€ .env
â””â”€â”€ server/
    â”œâ”€â”€ src/
    â”‚   â”œâ”€â”€ models/
    â”‚   â”‚   â”œâ”€â”€ User.ts
    â”‚   â”‚   â”œâ”€â”€ Message.ts
    â”‚   â”‚   â”œâ”€â”€ Chat.ts
    â”‚   â”‚   â”œâ”€â”€ Group.ts
    â”‚   â”‚   â””â”€â”€ Status.ts
    â”‚   â”œâ”€â”€ routes/
    â”‚   â”‚   â”œâ”€â”€ auth.ts
    â”‚   â”‚   â”œâ”€â”€ chat.ts
    â”‚   â”‚   â”œâ”€â”€ user.ts
    â”‚   â”‚   â””â”€â”€ status.ts
    â”‚   â”œâ”€â”€ middleware/
    â”‚   â”‚   â”œâ”€â”€ auth.ts
    â”‚   â”‚   â””â”€â”€ encryption.ts
    â”‚   â”œâ”€â”€ socket/
    â”‚   â”‚   â””â”€â”€ socketHandler.ts
    â”‚   â”œâ”€â”€ config/
    â”‚   â”‚   â””â”€â”€ database.ts
    â”‚   â””â”€â”€ server.ts
    â”œâ”€â”€ package.json
    â”œâ”€â”€ tsconfig.json
    â””â”€â”€ .env

================================================================================
                                CLIENT FILES
================================================================================

// FILE: client/package.json
{
  "name": "redchat-client",
  "version": "1.0.0",
  "private": true,
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.20.0",
    "styled-components": "^6.1.0",
    "socket.io-client": "^4.6.0",
    "axios": "^1.6.0",
    "typescript": "^5.3.0",
    "@types/react": "^18.2.0",
    "@types/react-dom": "^18.2.0",
    "@types/styled-components": "^5.1.26"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": ["react-app"]
  },
  "browserslist": {
    "production": [">0.2%", "not dead", "not op_mini all"],
    "development": ["last 1 chrome version", "last 1 firefox version", "last 1 safari version"]
  }
}

// FILE: client/.env
REACT_APP_API_URL=http://localhost:5000/api
REACT_APP_SOCKET_URL=http://localhost:5000

// FILE: client/src/styles/theme.ts
// Red Theme Configuration with Dark Mode Support
export const redTheme = {
  colors: {
    // Primary Red Palette
    primary: '#DC143C',           // Crimson Red
    primaryDark: '#B22222',       // Firebrick Red
    primaryLight: '#FF6B6B',      // Light Red

    // Backgrounds
    backgroundPrimary: '#1A0000',  // Deep Dark Red-Black
    backgroundSecondary: '#2D0A0A', // Dark Burgundy
    backgroundChat: '#120000',     // Almost Black with Red Tint

    // Message Bubbles
    messageSent: '#DC143C',        // Crimson for sent messages
    messageReceived: '#2D1515',    // Dark Red-Grey for received

    // Accents
    accentRed: '#FF0000',          // Pure Red for alerts
    accentOrange: '#FF4500',       // Orange-Red for status
    accentPink: '#FF1744',         // Pink-Red for highlights

    // Text Colors
    textPrimary: '#FFFFFF',
    textSecondary: '#FFB3BA',      // Light Pink
    textMuted: '#8B0000',          // Dark Red

    // Status Colors
    online: '#FF4500',             // Orange-Red
    offline: '#666666',
    typing: '#FF6B6B',

    // UI Elements
    border: '#4D0000',             // Dark Red Border
    shadow: 'rgba(220, 20, 60, 0.3)',
    overlay: 'rgba(26, 0, 0, 0.9)',
  },

  spacing: {
    xs: '4px',
    sm: '8px',
    md: '16px',
    lg: '24px',
    xl: '32px',
  },

  borderRadius: {
    sm: '8px',
    md: '12px',
    lg: '16px',
    round: '50%',
  },

  shadows: {
    sm: '0 2px 4px rgba(220, 20, 60, 0.1)',
    md: '0 4px 8px rgba(220, 20, 60, 0.2)',
    lg: '0 8px 16px rgba(220, 20, 60, 0.3)',
  },
};

// FILE: client/src/contexts/AuthContext.tsx
import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import axios from 'axios';

interface User {
  id: string;
  phoneNumber: string;
  username?: string;
  about?: string;
  profilePhoto?: string;
  isOnline: boolean;
  lastSeen: Date;
}

interface AuthContextType {
  user: User | null;
  isAuthenticated: boolean;
  login: (phoneNumber: string, password: string) => Promise<void>;
  register: (phoneNumber: string, password: string, username?: string) => Promise<void>;
  logout: () => void;
  updateProfile: (data: Partial<User>) => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [token, setToken] = useState<string | null>(localStorage.getItem('token'));

  useEffect(() => {
    if (token) {
      fetchUserProfile();
    }
  }, [token]);

  const fetchUserProfile = async () => {
    try {
      const response = await axios.get('/api/user/profile', {
        headers: { Authorization: `Bearer ${token}` }
      });
      setUser(response.data);
    } catch (error) {
      console.error('Failed to fetch user profile:', error);
      logout();
    }
  };

  const login = async (phoneNumber: string, password: string) => {
    try {
      const response = await axios.post('/api/auth/login', { phoneNumber, password });
      const { token: newToken, user: userData } = response.data;

      localStorage.setItem('token', newToken);
      setToken(newToken);
      setUser(userData);

      axios.defaults.headers.common['Authorization'] = `Bearer ${newToken}`;
    } catch (error) {
      throw new Error('Login failed');
    }
  };

  const register = async (phoneNumber: string, password: string, username?: string) => {
    try {
      const response = await axios.post('/api/auth/register', {
        phoneNumber,
        password,
        username,
      });
      const { token: newToken, user: userData } = response.data;

      localStorage.setItem('token', newToken);
      setToken(newToken);
      setUser(userData);

      axios.defaults.headers.common['Authorization'] = `Bearer ${newToken}`;
    } catch (error) {
      throw new Error('Registration failed');
    }
  };

  const logout = () => {
    localStorage.removeItem('token');
    setToken(null);
    setUser(null);
    delete axios.defaults.headers.common['Authorization'];
  };

  const updateProfile = async (data: Partial<User>) => {
    try {
      const response = await axios.put('/api/user/profile', data, {
        headers: { Authorization: `Bearer ${token}` }
      });
      setUser(response.data);
    } catch (error) {
      throw new Error('Profile update failed');
    }
  };

  return (
    <AuthContext.Provider
      value={{
        user,
        isAuthenticated: !!user,
        login,
        register,
        logout,
        updateProfile,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within AuthProvider');
  }
  return context;
};

// FILE: client/src/contexts/SocketContext.tsx
import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';
import { io, Socket } from 'socket.io-client';
import { useAuth } from './AuthContext';

interface SocketContextType {
  socket: Socket | null;
  isConnected: boolean;
}

const SocketContext = createContext<SocketContextType | undefined>(undefined);

export const SocketProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [socket, setSocket] = useState<Socket | null>(null);
  const [isConnected, setIsConnected] = useState(false);
  const { user, isAuthenticated } = useAuth();

  useEffect(() => {
    if (isAuthenticated && user) {
      const newSocket = io(process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000', {
        auth: {
          token: localStorage.getItem('token'),
        },
        transports: ['websocket'],
      });

      newSocket.on('connect', () => {
        console.log('Socket connected');
        setIsConnected(true);
      });

      newSocket.on('disconnect', () => {
        console.log('Socket disconnected');
        setIsConnected(false);
      });

      setSocket(newSocket);

      return () => {
        newSocket.close();
      };
    }
  }, [isAuthenticated, user]);

  return (
    <SocketContext.Provider value={{ socket, isConnected }}>
      {children}
    </SocketContext.Provider>
  );
};

export const useSocket = () => {
  const context = useContext(SocketContext);
  if (!context) {
    throw new Error('useSocket must be used within SocketProvider');
  }
  return context;
};

// FILE: client/src/App.tsx
import React, { useEffect, useState } from 'react';
import { BrowserRouter as Router, Route, Routes, Navigate } from 'react-router-dom';
import styled from 'styled-components';
import { AuthProvider, useAuth } from './contexts/AuthContext';
import { SocketProvider } from './contexts/SocketContext';
import Login from './components/Auth/Login';
import Register from './components/Auth/Register';
import ChatList from './components/Chat/ChatList';
import ChatWindow from './components/Chat/ChatWindow';
import StatusView from './components/Status/StatusView';
import UserProfile from './components/Profile/UserProfile';
import CallInterface from './components/Call/CallInterface';
import { redTheme } from './styles/theme';

const AppContainer = styled.div`
  width: 100%;
  height: 100vh;
  background: ${redTheme.colors.backgroundPrimary};
  color: ${redTheme.colors.textPrimary};
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  overflow: hidden;
`;

const MainLayout = styled.div`
  display: flex;
  height: 100vh;
  max-width: 1600px;
  margin: 0 auto;
  box-shadow: ${redTheme.shadows.lg};
`;

const Sidebar = styled.div<{ showChat?: boolean }>`
  width: 400px;
  background: ${redTheme.colors.backgroundSecondary};
  border-right: 1px solid ${redTheme.colors.border};
  display: flex;
  flex-direction: column;

  @media (max-width: 768px) {
    width: 100%;
    display: ${props => props.showChat ? 'none' : 'flex'};
  }
`;

const ChatArea = styled.div<{ showChat?: boolean }>`
  flex: 1;
  background: ${redTheme.colors.backgroundChat};
  display: flex;
  flex-direction: column;

  @media (max-width: 768px) {
    display: ${props => props.showChat ? 'flex' : 'none'};
  }
`;

const WelcomeScreen = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 100%;
  background: linear-gradient(135deg, ${redTheme.colors.backgroundPrimary} 0%, ${redTheme.colors.backgroundSecondary} 100%);

  h1 {
    color: ${redTheme.colors.primary};
    font-size: 2.5rem;
    margin-bottom: 1rem;
  }

  p {
    color: ${redTheme.colors.textSecondary};
    font-size: 1.2rem;
  }
`;

function App() {
  const [selectedChat, setSelectedChat] = useState<string | null>(null);
  const [showChat, setShowChat] = useState(false);

  return (
    <AuthProvider>
      <SocketProvider>
        <Router>
          <AppContainer>
            <Routes>
              <Route path="/login" element={<Login />} />
              <Route path="/register" element={<Register />} />
              <Route 
                path="/chats" 
                element={
                  <ProtectedRoute>
                    <MainLayout>
                      <Sidebar showChat={showChat}>
                        <ChatList 
                          onSelectChat={(chatId) => {
                            setSelectedChat(chatId);
                            setShowChat(true);
                          }} 
                        />
                      </Sidebar>
                      <ChatArea showChat={showChat}>
                        {selectedChat ? (
                          <ChatWindow 
                            chatId={selectedChat}
                            onBack={() => setShowChat(false)}
                          />
                        ) : (
                          <WelcomeScreen>
                            <h1>ðŸ”¥ RedChat</h1>
                            <p>Select a chat to start messaging</p>
                          </WelcomeScreen>
                        )}
                      </ChatArea>
                    </MainLayout>
                  </ProtectedRoute>
                } 
              />
              <Route path="/status" element={<ProtectedRoute><StatusView /></ProtectedRoute>} />
              <Route path="/profile" element={<ProtectedRoute><UserProfile /></ProtectedRoute>} />
              <Route path="/call/:callId" element={<ProtectedRoute><CallInterface /></ProtectedRoute>} />
              <Route path="/" element={<Navigate to="/chats" />} />
            </Routes>
          </AppContainer>
        </Router>
      </SocketProvider>
    </AuthProvider>
  );
}

const ProtectedRoute: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const { isAuthenticated } = useAuth();
  return isAuthenticated ? <>{children}</> : <Navigate to="/login" />;
};

export default App;

// FILE: client/src/index.tsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import { createGlobalStyle } from 'styled-components';

const GlobalStyle = createGlobalStyle`
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  body {
    margin: 0;
    font-family: 'Segoe UI', 'Roboto', 'Oxygen',
      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
      sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    background-color: #1A0000;
  }

  code {
    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
      monospace;
  }

  /* Custom scrollbar */
  ::-webkit-scrollbar {
    width: 8px;
  }

  ::-webkit-scrollbar-track {
    background: #1A0000;
  }

  ::-webkit-scrollbar-thumb {
    background: #DC143C;
    border-radius: 4px;
  }

  ::-webkit-scrollbar-thumb:hover {
    background: #FF6B6B;
  }
`;

const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);

root.render(
  <React.StrictMode>
    <GlobalStyle />
    <App />
  </React.StrictMode>
);

// FILE: client/src/components/Auth/Login.tsx
import React, { useState } from 'react';
import styled from 'styled-components';
import { useNavigate, Link } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';
import { redTheme } from '../../styles/theme';

const LoginContainer = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
  height: 100vh;
  background: linear-gradient(135deg, ${redTheme.colors.backgroundPrimary} 0%, ${redTheme.colors.primaryDark} 100%);
`;

const LoginBox = styled.div`
  background: ${redTheme.colors.backgroundSecondary};
  padding: ${redTheme.spacing.xl};
  border-radius: ${redTheme.borderRadius.lg};
  box-shadow: ${redTheme.shadows.lg};
  width: 100%;
  max-width: 400px;
  border: 1px solid ${redTheme.colors.border};
`;

const Title = styled.h1`
  color: ${redTheme.colors.primary};
  text-align: center;
  margin-bottom: ${redTheme.spacing.lg};
  font-size: 2rem;
  text-transform: uppercase;
  letter-spacing: 2px;
`;

const Input = styled.input`
  width: 100%;
  padding: ${redTheme.spacing.md};
  margin-bottom: ${redTheme.spacing.md};
  background: ${redTheme.colors.backgroundPrimary};
  border: 2px solid ${redTheme.colors.border};
  border-radius: ${redTheme.borderRadius.sm};
  color: ${redTheme.colors.textPrimary};
  font-size: 1rem;
  transition: all 0.3s ease;

  &:focus {
    outline: none;
    border-color: ${redTheme.colors.primary};
    box-shadow: 0 0 10px ${redTheme.colors.shadow};
  }

  &::placeholder {
    color: ${redTheme.colors.textMuted};
  }
`;

const Button = styled.button`
  width: 100%;
  padding: ${redTheme.spacing.md};
  background: ${redTheme.colors.primary};
  color: ${redTheme.colors.textPrimary};
  border: none;
  border-radius: ${redTheme.borderRadius.sm};
  font-size: 1.1rem;
  font-weight: bold;
  cursor: pointer;
  transition: all 0.3s ease;
  text-transform: uppercase;
  letter-spacing: 1px;

  &:hover {
    background: ${redTheme.colors.primaryLight};
    box-shadow: ${redTheme.shadows.md};
    transform: translateY(-2px);
  }

  &:active {
    transform: translateY(0);
  }

  &:disabled {
    background: ${redTheme.colors.textMuted};
    cursor: not-allowed;
  }
`;

const ErrorMessage = styled.div`
  background: ${redTheme.colors.accentRed};
  color: white;
  padding: ${redTheme.spacing.sm};
  border-radius: ${redTheme.borderRadius.sm};
  margin-bottom: ${redTheme.spacing.md};
  text-align: center;
`;

const LinkText = styled.p`
  text-align: center;
  margin-top: ${redTheme.spacing.md};
  color: ${redTheme.colors.textSecondary};

  a {
    color: ${redTheme.colors.primary};
    text-decoration: none;
    font-weight: bold;

    &:hover {
      color: ${redTheme.colors.primaryLight};
      text-decoration: underline;
    }
  }
`;

const Login: React.FC = () => {
  const [phoneNumber, setPhoneNumber] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const { login } = useAuth();
  const navigate = useNavigate();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setLoading(true);

    try {
      await login(phoneNumber, password);
      navigate('/chats');
    } catch (err) {
      setError('Invalid credentials. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <LoginContainer>
      <LoginBox>
        <Title>ðŸ”¥ RedChat</Title>
        {error && <ErrorMessage>{error}</ErrorMessage>}
        <form onSubmit={handleSubmit}>
          <Input
            type="tel"
            placeholder="Phone Number"
            value={phoneNumber}
            onChange={(e) => setPhoneNumber(e.target.value)}
            required
          />
          <Input
            type="password"
            placeholder="Password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
          />
          <Button type="submit" disabled={loading}>
            {loading ? 'Logging in...' : 'Login'}
          </Button>
        </form>
        <LinkText>
          Don't have an account? <Link to="/register">Register</Link>
        </LinkText>
      </LoginBox>
    </LoginContainer>
  );
};

export default Login;

// FILE: client/src/components/Auth/Register.tsx
import React, { useState } from 'react';
import styled from 'styled-components';
import { useNavigate, Link } from 'react-router-dom';
import { useAuth } from '../../cont
